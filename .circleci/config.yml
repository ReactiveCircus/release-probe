version: 2.0

# Docker configs
android_config: &android_config
  working_directory: ~/release-probe
  docker:
      - image: ychescale9/android-sdk:latest
  environment:
    JAVA_TOOL_OPTIONS: "-Xmx1g"
    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1g" -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false'
    TERM: dumb

# Cache
extract_cache_version: &extract_cache_version
  run:
    name: Extract cache version from environment variable
    command: |
      echo "Cache version: $CACHE_VERSION"
      echo "$CACHE_VERSION" > cacheVersion

save_gradle_cache: &save_gradle_cache
  save_cache:
    key: gradle-{{ checksum "cacheVersion" }}-{{ checksum "build.gradle" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
    paths:
      - ~/.gradle

restore_gradle_cache: &restore_gradle_cache
  restore_cache:
    key: gradle-{{ checksum "cacheVersion" }}-{{ checksum "build.gradle" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

# Workspace
attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/release-probe

persist_android_workspace: &persist_android_workspace
  persist_to_workspace:
    root: ~/release-probe
    paths:
      - app/build/outputs/apk/
      - app/build/outputs/bundle/
      - app/build/outputs/mapping/

# Branching filters
master_only: &master_only
  filters:
    branches:
      only: master

jobs:
  build:
    <<: *android_config
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            echo 'export BUILD_NUMBER="$CIRCLE_BUILD_NUM"' >> $BASH_ENV
            echo 'export APP_VERSION_CODE="$(./gradlew -q showVersionCode | tail -1)"' >> $BASH_ENV
            echo 'export APP_VERSION_NAME="$(./gradlew -q showVersionName | tail -1)"' >> $BASH_ENV
            echo 'export APP_ID="ychescale9.releaseprobe"' >> $BASH_ENV

      - checkout
      - *extract_cache_version
      - *restore_gradle_cache
      - run:
          name: Decrypt Secrets
          command: |
            openssl aes-256-cbc -md sha256 -d -in secrets/release-probe.aes -out secrets/release-probe.keystore -k $ENCRYPT_KEY
      - run:
          name: Assemble
          command: |
            ./gradlew assemble bundleProdRelease
      - store_artifacts:
          path: app/build/outputs/
      - run:
          name: Upload Mapping File to Bugsnag
          command: |
            curl https://upload.bugsnag.com/ \
              -F proguard=@app/build/outputs/mapping/prod/release/mapping.txt \
              -F apiKey=$RELEASE_PROBE_BUGSNAG_API_KEY \
              -F appId=$APP_ID \
              -F versionCode=$APP_VERSION_CODE \
              -F versionName=$APP_VERSION_NAME \
              -F overwrite=true
      - run:
          name: Cleanup Secrets
          command: rm -f secrets/release-probe.keystore
      - *persist_android_workspace
      - *save_gradle_cache

  unit_tests:
    <<: *android_config
    steps:
      - checkout
      - *extract_cache_version
      - *restore_gradle_cache
      - run:
          name: Test
          command: |
            ./gradlew test -PslimTests
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp --parents {} ~/junit/ \;
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - *save_gradle_cache

  static_analysis:
    <<: *android_config
    steps:
      - checkout
      - *extract_cache_version
      - *restore_gradle_cache
      - run:
          name: Android Lint
          command: ./gradlew :app:lintProdRelease
      - store_artifacts:
          path: app/build/reports/lint/lint-results.html
      - run:
          name: detekt
          command: |
            ./gradlew detekt
            mkdir -p ~/detekt/
            find . -type f -regex ".*/build/reports/detekt/.*html" -exec cp {} ~/detekt/ \;
      - store_artifacts:
          path: ~/detekt
      - *save_gradle_cache

  deploy_to_play:
    <<: *android_config
    steps:
      - checkout
      - *extract_cache_version
      - *restore_gradle_cache
      - *attach_workspace
      # TODO use gradle-play-publisher once custom archivesBaseName is supported for app bundles, and publishing existing apk without building is supported.
      - *save_gradle_cache

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - unit_tests
      - static_analysis
      - deploy_to_play:
          <<: *master_only
          requires:
            - build
            - unit_tests
            - static_analysis
