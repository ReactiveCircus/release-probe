buildscript {
    ext.isCiBuild = System.getenv("CI") == "true"
    ext.isIdeBuild = project.hasProperty('android.injected.invoked.from.ide')
    ext.enableCoverage = project.hasProperty('coverage')

    ext.buildConfig = [
            minSdk    : 23,
            targetSdk : 29,
            compileSdk: 29,
            buildTools: '29.0.3'
    ]

    ext.versions = [
            androidGradlePlugin       : '4.1.0-alpha09',
            googleServicesGradlePlugin: '4.3.3',
            bugsnag                   : '5.0.0',
            detekt                    : '1.9.1',
            leakCanary                : '2.3',
            kotlin                    : '1.3.72',
            kotlinx                   : [
                    coroutines: '1.3.6',
            ],
            firebase                  : [
                    analytics: '17.4.1'
            ],
            blueprint                 : '1.8.1',
            flowbinding               : '0.11.1',
            androidx                  : [
                    core              : '1.3.0-rc01',
                    annotation        : '1.2.0-alpha01',
                    appCompat         : '1.2.0-rc01',
                    activity          : '1.2.0-alpha04',
                    fragment          : '1.3.0-alpha04',
                    coordinatorLayout : '1.1.0',
                    recyclerView      : '1.2.0-alpha03',
                    swipeRefreshLayout: '1.1.0-rc01',
                    constraintLayout  : '1.1.3',
                    arch              : '2.1.0',
                    lifecycle         : '2.3.0-alpha02',
                    room              : '2.2.5',
                    paging            : '2.1.1',
                    navigation        : '2.3.0-alpha06',
                    work              : '2.4.0-alpha03',
                    test              : [
                            core   : '1.3.0-beta01',
                            monitor: '1.3.0-beta01',
                            rules  : '1.3.0-beta01',
                            runner : '1.3.0-beta01',
                            ext    : [
                                    junit: '1.1.2-beta01'
                            ]
                    ],
                    espresso          : '3.3.0-beta01'
            ],
            material                  : '1.2.0-alpha06',
            okhttp                    : '4.6.0',
            retrofit                  : '2.8.1',
            moshi                     : '1.9.2',
            json                      : '20190722',
            rxJava                    : '2.2.19',
            koin                      : '2.0.1',
            timber                    : '4.7.1',
            store                     : '3.1.1',
            junit                     : '4.13',
            mockk                     : '1.9.3',
            kluent                    : '1.58'
    ]

    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "com.google.gms:google-services:${versions.googleServicesGradlePlugin}"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${versions.detekt}"
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }

    plugins.withType(com.android.build.gradle.LibraryPlugin) {
        project.android.buildFeatures.buildConfig = false
    }

    plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
        plugin.extension.compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    tasks.withType(JavaCompile).configureEach { task ->
        task.sourceCompatibility = JavaVersion.VERSION_1_8
        task.targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
        task.kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach { task ->
        task.kotlinOptions {
            freeCompilerArgs += [
                    '-progressive',
                    '-XXLanguage:+NewInference',
                    '-XXLanguage:+InlineClasses',
                    '-Xopt-in=kotlin.Experimental',
            ]
        }
    }

    tasks.withType(Test).configureEach {
        maxParallelForks Runtime.runtime.availableProcessors() * 2
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }
}

subprojects {
    apply from: "$project.rootDir/gradle/detekt.gradle"

    /**
     * Disable debug and mock tests to avoid running the same tests repeatedly in different build variants.
     * ./gradlew test -PslimTests will run unit tests for *ProdRelease and *Release in Android App and Library projects,
     * and all tests in JVM projects.
     */
    if (project.hasProperty('slimTests')) {
        tasks.configureEach { task ->
            if (task.name ==~ /test.*(?i)(debug|mock).*/) {
                task.enabled = false
            }
        }
    }
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}

def envOrProp(String name) {
    def value = System.getenv(name)
    value != null ? value : project.hasProperty(name) ? project.getProperty(name) : ''
}

apply from: "$project.rootDir/gradle/projectDependencyGraph.gradle"
