plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.google.gms.google-services'
    // id 'com.getkeepsafe.dexcount' TODO https://github.com/KeepSafe/dexcount-gradle-plugin/issues/267
    id 'project-report'
}

apply from: "$project.rootDir/gradle/versioning.gradle"

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.buildTools

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        applicationId 'ychescale9.releaseprobe'
        versionCode buildVersionCode()
        versionName buildVersionName()
        archivesBaseName = "ReleaseProbe-$versionName"

        testApplicationId 'ychescale9.releaseprobe.test'
        testInstrumentationRunner "ychescale9.releaseprobe.MainTestRunner"

        // only support English for now
        resConfigs "en"

        // app name
        resValue 'string', 'app_name', "ReleaseProbe"
    }

    dexOptions {
        // do not pre-dex on CI
        preDexLibraries !isCiBuild
    }

    packagingOptions {
        exclude 'kotlin/**'
        exclude '**/*.kotlin_metadata'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/*.version'
        exclude 'META-INF/*.properties'
    }

    lintOptions {
        disable 'ParcelCreator'
        disable 'GoogleAppIndexingWarning'
        quiet false
        ignoreWarnings false
        htmlReport true
        xmlReport true
        htmlOutput file("$buildDir/reports/lint/lint-reports.html")
        xmlOutput file("$buildDir/reports/lint/lint-reports.xml")
        checkDependencies true
        ignoreTestSources true
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('secrets/debug.keystore')
            storePassword 'rp-debug'
            keyAlias 'rp-key'
            keyPassword 'rp-debug'
        }
        release {
            storeFile rootProject.file('secrets/release-probe.keystore')
            storePassword envOrProp('RELEASE_PROBE_STORE_PASSWORD')
            keyAlias 'releaseprobe'
            keyPassword envOrProp('RELEASE_PROBE_KEY_PASSWORD')
        }
    }

    bundle {
        // only support English for now
        language.enableSplit = false
    }

    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            testCoverageEnabled enableCoverage
            signingConfig signingConfigs.debug

            // override app name for LeakCanary
            resValue 'string', 'leak_canary_display_activity_label', "ReleaseProbe Leaks"

        }
        release {
            if (rootProject.file('secrets/release-probe.keystore').exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles('shrinker-rules.pro')
        }
    }

    flavorDimensions "environment"

    productFlavors {
        mock {
            applicationIdSuffix ".mock"
            // disable Bugsnag plugin for mock builds
            ext.enableBugsnag = false
            // Bugsnag API key for mock builds
            manifestPlaceholders = [bugsnagApiKey: ""]
            // disable Bugsnag for mock builds
            buildConfigField 'boolean', 'ENABLE_BUGSNAG', 'Boolean.parseBoolean("false")'
            // disable analytics for mock builds
            buildConfigField 'boolean', 'ENABLE_ANALYTICS', 'Boolean.parseBoolean("false")'
        }
        prod {
            manifestPlaceholders = [
                    bugsnagApiKey: "${envOrProp('RELEASE_PROBE_BUGSNAG_API_KEY')}"
            ]

            buildConfigField 'boolean', 'ENABLE_BUGSNAG', 'Boolean.parseBoolean("true")'
            buildConfigField 'boolean', 'ENABLE_ANALYTICS', 'Boolean.parseBoolean("true")'
        }
    }

    // filter out mockRelease and prodDebug (when on CI) builds.
    android.variantFilter { variant ->
        variant.getFlavors().each { flavor ->
            if (flavor.name != 'prod' && variant.buildType.name == 'release' ||
                    isCiBuild && flavor.name == 'prod' && variant.buildType.name == 'debug') {
                variant.setIgnore(true)
            }
        }
    }

    android.applicationVariants.all { variant ->
        // customize app name for debug builds
        if (variant.buildType.name == "debug") {
            // get app_name field from defaultConfig
            def appName = variant.mergedFlavor.resValues.get('app_name').getValue()

            // concatenate productFlavor to app name for non-production builds
            if (variant.flavorName != "prod") {
                appName += "-${variant.flavorName}"
            }

            // concatenate buildType to app name for non-release builds
            appName += "-${variant.buildType.name}"

            // set new app_name
            variant.resValue 'string', 'app_name', appName
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true
    }
}

dependencies {
    implementation project(path: ':bugsnag-tree')
    prodImplementation project(path: ':analytics-api-firebase')
    mockImplementation project(path: ':analytics-api-no-op')

    implementation project(path: ':core-ui')
    implementation project(path: ':feeds')
    implementation project(path: ':watchlist')
    implementation project(path: ':browse-collections')
    implementation project(path: ':settings')

    implementation project(path: ':data')
    prodImplementation project(path: ':remote-api-real')
    mockImplementation project(path: ':remote-api-mock')

    implementation project(path: ':background-work')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"

    // AndroidX
    implementation "androidx.coordinatorlayout:coordinatorlayout:${versions.androidx.coordinatorLayout}"
    implementation "androidx.work:work-runtime:${versions.androidx.work}"

    // rx
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxJava}"
    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rxKotlin}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxAndroid}"

    // rxlint
    debugImplementation "nl.littlerobots.rxlint:rxlint:${versions.rxLint}"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinx.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinx.coroutines}"

    // Bugsnag
    implementation "com.bugsnag:bugsnag-android:${versions.bugsnag}"

    // Koin
    implementation "org.koin:koin-core:${versions.koin}"
    implementation "org.koin:koin-androidx-viewmodel:${versions.koin}"

    // Firebase core
    prodImplementation "com.google.firebase:firebase-core:${versions.firebase.core}"

    // Enable LeakCanary for debug builds
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakCanary}"

    // Unit tests
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "io.mockk:mockk:${versions.mockk}"

    testImplementation "org.amshove.kluent:kluent-android:${versions.kluent}"
    testImplementation "androidx.arch.core:core-testing:${versions.androidx.arch}"
    testImplementation "org.koin:koin-test:${versions.koin}"

    // Android tests
    androidTestImplementation project(path: ':testing-infra')
}

tasks.whenTaskAdded { task ->
    // don't count dex methods for debug builds
    if (task.name.endsWith("DebugDexMethods")) {
        task.configure {
            it.enabled = false
        }
    }
}

android.applicationVariants.all { variant ->
    // disable google services plugin for mock flavor
    tasks.named("process${variant.name.capitalize()}GoogleServices").configure {
        it.enabled = !variant.name.contains("mock")
    }
}
